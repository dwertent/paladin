/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitGo {
        canBeConsumed = false
        canBeResolved = true
    }
    notoGo {
        canBeConsumed = false
        canBeResolved = true
    }
    zetoGo {
        canBeConsumed = false
        canBeResolved = true
    }
    zetoArtifacts {
        canBeConsumed = false
        canBeResolved = true
    }
    poseidonArtifacts {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitGo project(path: ':toolkit:go', configuration: 'goSource')
    notoGo project(path: ":domains:noto", configuration: "goSource")
    zetoGo project(path: ":domains:zeto", configuration: "goSource")
    zetoArtifacts project(path: ":domains:zeto", configuration: "zetoArtifacts")
    poseidonArtifacts project(path: ":domains:zeto", configuration: "poseidonArtifacts")
}

ext {
    clusterName = project.hasProperty('clusterName') ? project.clusterName : 'paladin' 
    namespace = project.hasProperty('namespace') ? project.namespace : 'default' // Default namespace is 'default' 
    deleteCluster = project.hasProperty('deleteCluster') ? project.deleteCluster.toBoolean() : false // By default, do not delete the cluster
    buildPaladin = project.hasProperty('buildPaladin') ? project.buildPaladin == 'true' : true // Default is to build Paladin
    buildOperator = project.hasProperty('buildOperator') ? project.buildOperator == 'true' : true // Default is to build the operator

    operatorImageName = project.hasProperty('operatorImageName') ? project.operatorImageName : 'paladin-operator'
    operatorImageTag = project.hasProperty('operatorImageTag') ? project.operatorImageTag : 'test'
    paladinImageName = project.hasProperty('paladinImageName') ? project.paladinImageName : 'paladin'
    paladinImageTag = project.hasProperty('paladinImageTag') ? project.paladinImageTag : 'test'
}

def printClusterStatus(String namespace) {
    def getAllCommand = ["kubectl", "get", "all", "-n", namespace]
    def getAllProcess = getAllCommand.execute()
    getAllProcess.waitFor()
    println getAllProcess.in.text.trim()
} 

def verifyResourceCreated(String namespace, String resourceType, String resourceName, String desiredReplicas = "1", int timeoutSeconds = 60) {
    def startTime = System.currentTimeMillis()
    def endTime = startTime + (timeoutSeconds * 1000)
    def resourceReady = false

    while (System.currentTimeMillis() < endTime) {
        def command = ["kubectl", "get", resourceType, resourceName, "-n", namespace, "-o", "jsonpath={.status.readyReplicas}"]
        def process = command.execute()
        process.waitFor()
        def readyReplicas = process.text.trim()
        println "Current Ready Replicas: ${readyReplicas}"

        if (process.exitValue() == 0 && readyReplicas == desiredReplicas) {
            resourceReady = true
            break
        }
        Thread.sleep(2000) // Wait for 2 seconds before retrying
    }

    if (!resourceReady) {
        printClusterStatus(namespace)
        throw new Exception("${resourceType} ${resourceName} in namespace ${namespace} did not become ready within ${timeoutSeconds} seconds.")
    } else {
        println "${resourceType} ${resourceName} in namespace ${namespace} is ready with ${desiredReplicas} replicas."
    }
}

def verifyResourceReady(String namespace, String resourceType, String resourceName, String condition, int timeoutSeconds = 60) {

    // Wait for resource to meet expected condition
    def waitCommand = ["kubectl", "wait", "--for=${condition}", "${resourceType}", "${resourceName}", "-n", namespace, "--timeout=${timeoutSeconds}s"]
    def waitProcess = waitCommand.execute()
    waitProcess.waitFor()
    println "Wait Output: ${waitProcess.text}"

    if (waitProcess.exitValue() != 0) {
        printClusterStatus(namespace)
        throw new Exception("Resource ${resourceType}/${resourceName} (${namespace}) was not ready in the expected time.")
    }
    printClusterStatus(namespace)
}

task copySolidity(type: Copy) {
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/registry/IdentityRegistry.sol/IdentityRegistry.json'
        include 'contracts/domains/noto/NotoFactory.sol/NotoFactory.json'
        include 'contracts/domains/pente/PenteFactory.sol/PenteFactory.json'
        include 'contracts/private/NotoTrackerERC20.sol/NotoTrackerERC20.json'
        include 'contracts/testcontracts/ERC20Simple.sol/ERC20Simple.json'
        include 'contracts/shared/BondTrackerPublic.sol/BondTrackerPublic.json'
        include 'contracts/private/BondTracker.sol/BondTracker.json'
        include 'contracts/private/BondSubscription.sol/BondSubscription.json'
    }
    into 'test/e2e/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyZetoSolidity(type: Copy) {
    inputs.files(configurations.zetoArtifacts)
    inputs.files(configurations.poseidonArtifacts)
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.zetoArtifacts.asPath) {
        include 'artifacts/contracts/**/*.json'
        include 'artifacts/@iden3/contracts/**/*.json'
        exclude '**/*.dbg.json'
    }
    from fileTree(configurations.poseidonArtifacts.asPath) {
        include 'Poseidon2.json'
        include 'Poseidon3.json'
    }
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/registry/IdentityRegistry.sol/IdentityRegistry.json'
        include 'contracts/domains/zeto/ZetoFactory.sol/ZetoFactory.json'
    }
    into 'test/e2e/abis/zeto'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task buildContractSamples(type: Exec, dependsOn: [copySolidity, copyZetoSolidity]) {
    commandLine "go", "run", "./contractpkg", "generate", "./contractpkg/contract_map.json"
}
 
// Task to build the Paladin image from the parent project
task buildPaladinImage {
    dependsOn ':docker' // Builds the Paladin image in the parent project
}

// Task to build the operator Docker image
task docker(type: Exec) {
    executable 'make'
    args 'docker-build'
}

// Task to build the Paladin image from the parent project
task buildOperatorImage {
    dependsOn ':operator:docker' // Builds the Paladin image in the parent project
}

// Task to start the Kind cluster
task startKindCluster(type: Exec) {
    executable 'make'
    args 'kind-start'
    args "CLUSTER_NAME=${clusterName}"
}

// Task to load images into the Kind cluster
task promoteKindImages(type: Exec, dependsOn: [
    startKindCluster
]) {
    if (buildPaladin) {
        dependsOn buildPaladinImage
    }
    if (buildOperator) {
        dependsOn buildOperatorImage
    }
    executable 'make'
    args 'kind-promote'
    args "CLUSTER_NAME=${clusterName}"
    args "OPERATOR_IMAGE_NAME=${operatorImageName}"
    args "OPERATOR_IMAGE_TAG=${operatorImageTag}"
    args "PALADIN_IMAGE_NAME=${paladinImageName}"
    args "PALADIN_IMAGE_TAG=${paladinImageTag}"
}

task prepareCRDsChart(type: Exec) {
    executable 'make'
    args 'prepare-crd-chart'
}

// Task to install Helm CRDs
task installCrds(type: Exec, dependsOn: [startKindCluster, prepareCRDsChart]){
    executable 'make'
    args 'install-crds'
}

task prepareOperatorChart(type: Exec, dependsOn: [buildContractSamples]) {
    commandLine "go", "run", "./contractpkg", "template", "config/samples", "charts/paladin-operator/templates/samples"
}

task prepareArtifacts(type: Exec, dependsOn: [buildContractSamples]) {
    commandLine "go", "run", "./contractpkg", "combine", "config/samples", "generated-crs"
}

// Task to install the operator using Helm
task installOperator(type: Exec, dependsOn: [installCrds, promoteKindImages, prepareOperatorChart]) {
    executable 'make'
    args 'helm-install'
    args "NAMESPACE=${namespace}"
    args "OPERATOR_IMAGE_NAME=${operatorImageName}"
    args "OPERATOR_IMAGE_TAG=${operatorImageTag}"
    args "PALADIN_IMAGE_NAME=${paladinImageName}"
    args "PALADIN_IMAGE_TAG=${paladinImageTag}"
}


// Task to verify the operator is running in the 'paladin' namespace
task verifyOperator(dependsOn: installOperator) {
    doLast {
        println 'Waiting for operator deployment to become ready...'
        verifyResourceCreated(namespace, 'deployment', 'paladin-operator', "1")
    }
}

// Task to verify the besu statefulSet
task verifyBesu(dependsOn: verifyOperator) {
    doLast {
        println 'Waiting for besu statefulSet to become ready...'

        verifyResourceCreated(namespace,  'statefulset', 'besu-node1', "1", 120)
        verifyResourceCreated(namespace, 'statefulset', 'besu-node2', "1", 120)
        verifyResourceCreated(namespace, 'statefulset', 'besu-node3', "1", 120)
    }
}

// Task to verify the paladin statefulSet
task verifyPaladin(dependsOn: verifyBesu) {
    doLast {
        println 'Waiting for paladin statefulSet to become ready...'

        verifyResourceCreated(namespace, 'statefulset', 'paladin-node1', "1", 120)
        verifyResourceCreated(namespace, 'statefulset', 'paladin-node2', "1", 120)
        verifyResourceCreated(namespace, 'statefulset', 'paladin-node3', "1", 120)
    }
}

// The 'deplay' runs the whole flow
task deploy(dependsOn: [copySolidity, copyZetoSolidity, verifyPaladin]) {
    doLast {
        println 'Deplopy setup completed. Operator is running in the paladin namespace.'
    }
}

// The 'e2e' task runs the whole flow
task e2e(type: Exec, dependsOn: [deploy]) {
    executable 'make'
    args 'test-e2e'
    args "NAMESPACE=${namespace}"
    args "CLUSTER_NAME=${clusterName}"
}

 
// Task to clean up resources
task cleanCluster(type: Exec) {
    executable 'make'
    args 'clean'
    args "NAMESPACE=${namespace}"
    args "DELETE_CLUSTER=${deleteCluster}"
    args "CLUSTER_NAME=${clusterName}"
}

task clean {
    dependsOn cleanCluster
}

// Existing 'make' task
task make(type: Exec, dependsOn: copySolidity) {
    inputs.files(configurations.toolkitGo)
    inputs.files(configurations.notoGo)
    inputs.files(configurations.zetoGo)
    executable 'make'
}

task build {
    // Default 'build' task just builds as part of the main Paladin build.
    // The operator primary build and test is all docker, and runs in separate builds
    dependsOn make
}

// Task to update the Paladin image in the Kind cluster
task updatePaladinImage(type: Exec) {
    doFirst {
        buildOperator = false
        buildPaladin = true
    }
    dependsOn promoteKindImages 
    executable 'kubectl'
    args "rollout" 
    args "restart" 
    args "sts"
    args "paladin-node1"
    args "paladin-node2"
    args "paladin-node3"
}
